#  NOTE(koekeishiya): A list of all built-in modifier and literal keywords can
#                     be found at https://github.com/koekeishiya/skhd/issues/1
#
#                     A hotkey is written according to the following rules:
#
#                       hotkey       = <mode> '<' <action> | <action>
#
#                       mode         : aerospace name of mode' | <mode> ',' <mode>
#
#                       action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                                      <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                                      <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#                       keysym       = <mod> '-' <key> | <key>
#
#                       mod          : aerospace modifier keyword' | <mod> '+' <mod>
#
#                       key          = <literal> | <keycode>
#
#                       literal      : aerospace single letter or built-in keyword'
#
#                       keycode      : aerospace apple keyboard kVK_<Key> values (0x3C)'
#
#                       proc_map_lst = * <proc_map>
#
#                       proc_map     = <string> ':' <command> | <string>     '~' |
#                                      '*'      ':' <command> | '*'          '~'
#
#                       string       : aerospace "' 'sequence of characters' '"'
#
#                       command      = command is executed through '$SHELL -c' and
#                                      follows valid shell syntax. if the $SHELL environment
#                                      variable is not set, it will default to '/bin/bash'.
#                                      when bash is used, the ';' delimeter can be specified
#                                      to chain commands.
#
#                                      to allow a command to extend into multiple lines,
#                                      prepend '\' at the end of the previous line.
#
#                                      an EOL character signifies the end of the bind.
#
#                       ->           = keypress is not consumed by skhd
#
#                       *            = matches every application not specified in <proc_map_lst>
#
#                       ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
#  NOTE(koekeishiya): A mode is declared according to the following rules:
#
#                       mode_decl : aerospace ::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#                                   '::' <name> '@'               | '::' <name>
#
#                       name      = desired name for this mode,
#
#                       @         = capture keypresses regardless of being bound to an action
#
#                       command   = command is executed through '$SHELL -c' and
#                                   follows valid shell syntax. if the $SHELL environment
#                                   variable is not set, it will default to '/bin/bash'.
#                                   when bash is used, the ';' delimeter can be specified
#                                   to chain commands.
#
#                                   to allow a command to extend into multiple lines,
#                                   prepend '\' at the end of the previous line.
#
#                                   an EOL character signifies the end of the bind.

# add an on_enter command to the default mode
# :: default : yabai -m config active_window_border_color 0xff775759
#
# defines a new mode 'test' with an on_enter command, that captures keypresses
# :: test @ : yabai -m config active_window_border_color 0xff24ccaa
#
# from 'default' mode, activate mode 'test'
# cmd - x ; test
#
# from 'test' mode, activate mode 'default'
# test < cmd - x ; default
#
# launch a new terminal instance when in either 'default' or 'test' mode
# default, test < cmd - return : open -na /Applications/Terminal.app

# application specific bindings
#
# cmd - n [
#     "kitty"       : echo "hello kitty"
#     *             : echo "hello everyone"
#     "qutebrowser" : echo "hello qutebrowser"
#     "terminal"    ~
#     "finder"      : false
# ]

# specify a file that should be included as an additional config-file.
# treated as an absolutepath if the filename begins with '/' otherwise
# the file is relative to the path of the config-file it was loaded from.
#
# .load "/Users/Koe/.config/partial_skhdrc"
# .load "partial_skhdrc"

# prevent skhd from monitoring events for specific applications.
#
# .blacklist [
#    "kitty"
#    "terminal"
#    "qutebrowser"
# ]

# open terminal, blazingly fast compared to iTerm/Hyper
# cmd - return : /Applications/kitty.app/Contents/MacOS/kitty --single-instance -d ~

# open qutebrowser
# cmd + shift - return : ~/Scripts/qtb.sh

# open mpv
# cmd - m : open -na /Applications/mpv.app $(pbpaste)

# aerospace main

# See: https://nikitabobko.github.io/AeroSpace/commands#layout
alt - 0x2C : aerospace layout tiles horizontal vertical
alt - 0x2B : aerospace layout accordion horizontal vertical

# See: https://nikitabobko.github.io/AeroSpace/commands#focus
alt - 0x04 : aerospace focus left
alt - 0x26 : aerospace focus down
alt - 0x28 : aerospace focus up
alt - 0x25 : aerospace focus right

alt - home : aerospace focus left
alt - pagedown : aerospace focus down
alt - pageup : aerospace focus up
alt - end : aerospace focus right

# See: https://nikitabobko.github.io/AeroSpace/commands#move
alt + shift - 0x04 : aerospace move left
alt + shift - 0x26 : aerospace move down
alt + shift - 0x28 : aerospace move up
alt + shift - 0x25 : aerospace move right

alt + shift - home : aerospace move left
alt + shift - pagedown : aerospace move down
alt + shift - pageup : aerospace move up
alt + shift - end : aerospace move right

# See: https://nikitabobko.github.io/AeroSpace/commands#resize
alt - 0x1B : aerospace resize smart -50
alt - 0x18 : aerospace resize smart +50

# See: https://nikitabobko.github.io/AeroSpace/commands#workspace
alt - 0x0C : aerospace workspace 1
alt - 0x0D : aerospace workspace 2
alt - 0x0E : aerospace workspace 3
alt - 0x23 : aerospace workspace 4
alt - 0x21 : aerospace workspace 5
alt - 0x1E : aerospace workspace 6

# See: https://nikitabobko.github.io/AeroSpace/commands#move-node-to-workspace
alt + shift - 0x0C : aerospace move-node-to-workspace 1
alt + shift - 0x0D : aerospace move-node-to-workspace 2
alt + shift - 0x0E : aerospace move-node-to-workspace 3
alt + shift - 0x23 : aerospace move-node-to-workspace 4
alt + shift - 0x21 : aerospace move-node-to-workspace 5
alt + shift - 0x1E : aerospace move-node-to-workspace 6

# See: https://nikitabobko.github.io/AeroSpace/commands#workspace-back-and-forth
alt - 0x30 : aerospace workspace-back-and-forth

# See: https://nikitabobko.github.io/AeroSpace/commands#move-workspace-to-monitor
alt + shift - 0x30 : aerospace move-workspace-to-monitor --wrap-around next

# See: https://nikitabobko.github.io/AeroSpace/commands#mode
alt + shift - 0x29 : aerospace mode service